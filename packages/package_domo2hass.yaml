# Package file for Home Assistant, used for getting Domoticz data via MQTT 
# Type: Home Assistant yaml file
# Date: 12-05-2019
# Author: R.Bisschops
#
# Changelog:
# V0.1.0:  First version
# V0.2.0:  Updated with additional input booleans
# V0.3.0:  Added switches that copies bahaviour of HA Bridge sensors
# V0.3.1:  Removed sensors from domo, removed groups
# V0.3.2:  Removed sensors from domo, removed groups
# V0.4.0:  Code cleaned, removed all code for environental sensors
# V0.5.0:  Added code for receiving Domoticz data from switches 
#          (lighting2 and Light/Switch types)
# V0.5.1:  Removed domo entertainment switch
# V0.5.2:  Added sunscreen switch (first version)
# V0.6.0:  Added automations and script for electricity meters
# V0.6.1:  Updated automation for storing E high and low values (swapped them)

###############################################################################
#                              Homeassistant settings
###############################################################################
homeassistant:

###############################################################################
#                              Entities
###############################################################################
input_boolean:
  # Light switches
  domo_garden_light:
    name: Verlichting tuin
  domo_porch_light:
    name: Buiten lamp
  domo_hallway_light:
    name: Verlichting halletje
  domo_kitchen_cabinets:
    name: Verlichting hoge kasten
  domo_bar_light:
    name: Verlichting bar
  domo_christmastree:
    name: Kerstboom
  # Other switches  
  domo_virtual_heating:
    name: Virtuele verwarming
  domo_water_ornament:
    name: Waterbollen tuin
  domo_sunscreen:
    name: Zonnescherm  

## Alternative switch to use as template copy. Not tested yet. Won't work as it is now 
# switch:
#   - platform: template
#     switches:
#       copy:
#         value_template: "{{ is_state('binary_sensor.habridge_bar_light', 'on') }}"
#         turn_on:
#           service: switch.turn_on
#           data:
#             entity_id: binary_sensor.habridge_bar_light
#         turn_off:
#           service: switch.turn_off
#           data:
#             entity_id: binary_sensor.habridge_bar_light

###############################################################################
#                               Groups
###############################################################################
group:


###############################################################################
#                              Automations
###############################################################################
automation:
  ## Publish a switch to Domoticz
  - alias: Domoticz publish switch
    hide_entity: false
    initial_state: 'on'  
    trigger:     
      platform: state
      entity_id:
        # - input_boolean.domo_entertainment
        - input_boolean.domo_garden_light
        - input_boolean.domo_porch_light
        - input_boolean.domo_hallway_light
        - input_boolean.domo_kitchen_cabinets
        - input_boolean.domo_christmastree    
        - input_boolean.domo_bar_light
        - input_boolean.domo_virtual_heating
        - input_boolean.domo_water_ornament
        - input_boolean.domo_sunscreen
    condition:
    action:
      - service: script.domoticz_switch
        data_template:
          device: '{{ trigger.to_state.attributes.friendly_name }}'
          new_state: >-
            {{ trigger.to_state.state }}        

  ## Convert Domoticz Zigbee switch (type Light/Switch) to Hass 
  - alias: Read domoticz Zigbee switch via MQTT
    hide_entity: false
    initial_state: 'on'  
    trigger:
      - platform: mqtt
        topic: 'domoticz/out'
    condition:
      condition: template
      value_template: 
        '{{ trigger.payload_json.dtype == "Light/Switch" }}'
    action:
      - service: script.domoticz_input
        data_template:
          device: '{{ trigger.payload_json.idx }}'
          state: >-
            {{ trigger.payload_json.svalue1 }}   

  ## Convert Domoticz CoCo switch (type Lighting 2) to Hass 
  - alias: Read domoticz COCO switch via MQTT
    hide_entity: false
    initial_state: 'on'  
    trigger:
      - platform: mqtt
        topic: 'domoticz/out'
    condition:
      condition: template
      value_template: 
        '{{ trigger.payload_json.dtype == "Lighting 2" }}'
    action:
      - service: script.domoticz_input
        data_template:
          device: '{{ trigger.payload_json.idx }}'
          state: >-
            {{ trigger.payload_json.nvalue }}    

  # Switch Dome entity based on HA Bridge sensor
  # - alias: "Domo entry - voice"
  #   hide_entity: false
  #   initial_state: 'on'
  #   trigger:
  #     platform: state
  #     entity_id:
  #       - binary_sensor.habridge_christmastree
  #   action:
  #     - service: script.switch_to_domo
  #       data_template:
  #         device: '{{ trigger.to_state.object_id }}'
  #     - service: logbook.log
  #       data_template:
  #         name: Device value
  #         message: '{{ trigger.to_state.object_id }}'

  ## Convert Domoticz Energy meters to Hass
  # Gas meter will sent svalue1
  # Elektra meter will sent svalue1, svalue2, svalue5
  # Water meter will sent    
  - alias: Domoticz Elektra waarden via MQTT
    hide_entity: false
    initial_state: 'on'  
    trigger:
      - platform: mqtt
        topic: 'domoticz/out'
    condition:
      condition: and
      conditions:
      - condition: template
        value_template: '{{ trigger.payload_json.dtype == "P1 Smart Meter" }}'
      - condition: template
        value_template: '{{ trigger.payload_json.name == "Elektra" }}'        
    action: 
      - service: script.domoticz_electricity
        data_template:
          device: '{{ trigger.payload_json.name }}'
          low: '{{ trigger.payload_json.svalue1 }}' 
          high: '{{ trigger.payload_json.svalue2 }}'
          current: '{{ trigger.payload_json.svalue5 }}'

  - alias: Domoticz Gas waarden via MQTT
    hide_entity: false
    initial_state: 'on'  
    trigger:
      - platform: mqtt
        topic: 'domoticz/out'
    condition:
      condition: and
      conditions:
      - condition: template
        value_template: '{{ trigger.payload_json.dtype == "P1 Smart Meter" }}'
      - condition: template
        value_template: '{{ trigger.payload_json.name == "Gas" }}'        
    action: 
      - service: script.domoticz_gas
        data_template:
          device: '{{ trigger.payload_json.name }}'
          usage: '{{ trigger.payload_json.svalue1 }}' 

  - alias: Domoticz Water waarden via MQTT
    hide_entity: false
    initial_state: 'on'  
    trigger:
      - platform: mqtt
        topic: 'domoticz/out'
    condition:
      condition: and
      conditions:
      - condition: template
        value_template: '{{ trigger.payload_json.dtype == "RFXMeter" }}'
      - condition: template
        value_template: '{{ trigger.payload_json.name == "Water" }}'        
    action: 
      - service: script.domoticz_water
        data_template:
          device: '{{ trigger.payload_json.name }}'
          usage: '{{ trigger.payload_json.svalue1 }}' 

###############################################################################
#                              Templates
###############################################################################


###############################################################################
#                              Scripts
###############################################################################
script:
  #############################################################################
  # Script for converting and setting Domoticz switches via MQTT.
  # Uses a dict to lookup the ID of the switch in Domoticz.
  # Uses a dict to convert state to a state recognized by Domoticz.
  # The Domoticz API call is packed in JSON and sent to the MQTT topic 
  # domoticz/in as the payload. 
  ############################################################################# 

  ## Convert Hass switch to Domoticz
  domoticz_switch:  
    alias: Set domoticz switch via MQTT
    sequence:
      - service: mqtt.publish
        data_template:
          topic: 'domoticz/in'          
          payload_template: >-
            {% set domoticz_devices = 
              {
              "Buiten lamp": 20,
              "Kerstboom": 26,
              "Verlichting tuin": 28,
              "Verlichting halletje": 21,
              "Verlichting hoge kasten": 23,
              "Verlichting bar": 27,
              "Virtuele verwarming": 161,
              "Waterbollen tuin": 29,
              "Zonnescherm": 30
              } 
            %}
            {% set status =
              {
              "on": "On",  
              "off": "Off"
              }
            %}
            {% set id = domoticz_devices[device] %}
            {% set new_state = status[new_state] %}
            {{ {
             "command": "switchlight",
             "idx": id,
             "switchcmd": new_state
            }|tojson }}

  ## Convert Domoticz switch to Hass 
  domoticz_input:
    alias: Receive domoticz switch via MQTT
    sequence:
      - service: mqtt.publish
        data_template:
          topic: 'home/switch/100/switch'
          payload_template: >-
            {% set payload = "n/a" %}
            {% if state == "0" %}
            {% set payload = 'off' %}  
            {% elif state == "1" %}
            {% set payload = 'on' %} 
            {% endif %}
            {{ {
             "command": payload,
             "source": device
            }|tojson }}           

  # switch_to_domo:
  #   alias: Convert to domoticz entity
  #   sequence:
  #     - service_template: >-
  #         {% set device = device|replace("habridge_", "") %}
  #         {% if is_state(["binary_sensor.habridge_",device]|join(), 'on') %}
  #           homeassistant.turn_on
  #         {% elif is_state(["binary_sensor.habridge_",device]|join(), 'off') %}
  #           homeassistant.turn_off
  #         {% endif%}
  #       data_template:
  #         entity_id: >-
  #           {% set entity = ["input_boolean.domo_",device]|join() %}
  #           {{ entity }}  

  domoticz_electricity:
    alias: Receive domoticz elektra readings via MQTT
    sequence:
      - service: mqtt.publish
        data_template:
          topic: 'home/meter/electricity'
          payload_template: >-
            {{ {
              "device": device,
              "usage_high": high,
              "usage_low": low,
              "current_usage": current
            }|tojson }}

  domoticz_gas:
    alias: Receive domoticz gas readings via MQTT
    sequence:
      - service: mqtt.publish
        data_template:
          topic: 'home/meter/gas'
          retain: true
          payload_template: >-
            {{ {
              "device": device,
              "usage": usage,
            }|tojson }}

  domoticz_water:
    alias: Receive domoticz water readings via MQTT
    sequence:
      - service: mqtt.publish
        data_template:
          topic: 'home/meter/water'
          payload_template: >-
            {{ {
              "device": device,
              "usage": usage,
            }|tojson }}

###############################################################################
#                              Timers
###############################################################################

